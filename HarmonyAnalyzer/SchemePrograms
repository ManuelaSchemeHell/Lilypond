#(define (pitch-equals? p1 p2)
   (and
    (= (ly:pitch-alteration p1) (ly:pitch-alteration p2))
    (= (ly:pitch-notename p1) (ly:pitch-notename p2))))

#(define bugeln
   (lambda (plis)
     (cond
      ;; wir haben fertig gebügelt
      ((null? plis) '())
      (else (cons (ly:make-pitch 0
                    (ly:pitch-notename (car plis))
                    (ly:pitch-alteration (car plis)))
              (bugeln (cdr plis)))

        ))))

#(define wegdamit
   ;; wir entfernen aus der sortierten und gebügelten Liste doppelte Einträge
   (lambda (plis)
     (cond
      ;; wir haben fertig
      ;; wenn kein Schwanz mehr vorhanden ist
      ((null? (cdr plis)) plis)
      (else
       (cond
        ((eq? (car plis) (cadr plis))
         (wegdamit (cdr plis)))
        (else
         (cons (car plis) (wegdamit (cdr plis))
           )))))))

#(define fixfertig
   (lambda (music)
     (cond
      ;; das dient nur dazu, um Fehler abzufangen
      ;; von nix kommt nix ;-)
      ((null? music) '())
      ;; keine MusiK?
      ;; dann retournieren wir den Input
      ((not (ly:music? music)) music)
      (else
       (wegdamit (sort (bugeln (music-pitches music) ) ly:pitch<?) )
       ))))

#(define (naturalize-pitch p)
   (let ((o (ly:pitch-octave p))
         (a (* 4 (ly:pitch-alteration p)))
         ;; alteration, a, in quarter tone steps,
         ;; for historical reasons
         (n (ly:pitch-notename p)))
     (cond
      ((and (> a 1)
            (or (eq? n 6)
                (eq? n 2)))
       (set! a (- a 2))
       (set! n (+ n 1)))
      ((and (< a -1)
            (or (eq? n 0) (eq? n 3)))
       (set! a (+ a 2))
       (set! n (- n 1))))
     (cond
      ((> a 2) (set! a (- a 4)) (set! n (+ n 1)))
      ((< a -2) (set! a (+ a 4)) (set! n (- n 1))))
     (ly:make-pitch 0 n (/ a 4))))

#(define ist-weiss?
   ;; #t: der Ton wird auf einer weißen Taste gespielt
   (lambda (p)
     (let ((a (ly:pitch-alteration (naturalize-pitch p)))
           (n (ly:pitch-notename (naturalize-pitch p)))
           )
       (if (= a 0)
           #t
           #f))))

#(define nur-weiss?
   ;; gibt #t für Pitchlisten zurück
   ;; auf dem Klavier nur auf weißen Tasten gespielt werden
   (lambda (plis)
     (cond
      ((null? plis) #t)
      ;; wenn der Ton weiß ist
      ;; dann prüfen wir weiter
      ((ist-weiss? (car plis))
       (nur-weiss? (cdr plis)))
      ;; wenn wir auf einen schwarzen Ton stoßen
      ;; können wir sofort aufhören und #f zurückgeben
      (else #f
        ))))

#(define  (my-pitches music)
   "Return a list of all pitches from @var{music}."
   ;; Opencoded for efficiency.
   (reverse!
    (let loop ((music music) (pitches '()))
      (let ((p  (ly:music-property music 'pitch)))
        (if (ly:pitch? p)
            (cons (naturalize-pitch p) pitches)
            (let ((elt (ly:music-property music 'element)))
              (fold loop
                (if (ly:music? elt)
                    (loop elt pitches)
                    pitches)
                (ly:music-property music 'elements))))))))

#(define mk-pitch
   ;; wir erschaffen eine Pitchliste aus der Musikliste
   (lambda (ls)
     (cond
      ;; wir haben fertig, wenn Liste leer ist
      ((null? ls) '())

      ;; wenn das Listenelement ein gültiger Musikausdruck ist
      ;; dann fügen wir die sortierte Pitchliste als Listenelement hinzu
      ((ly:music? (car ls))
       (cons (sort (my-pitches (car ls) ) ly:pitch<?)
         ;(cons (car l2) (vvv l1 (cdr l2)))
         (mk-pitch (cdr ls)))
       )
      ;; ansonsten machen wir mit dem Rest der Liste weiter
      (else (mk-pitch (cdr ls)))
      )
     )
   )

#(define is-in?
   ;; wir versuchen zu eruieren
   ;; ob alle Elemente der Liste l1 in l2 enthalten sind
   ;; genauer gesagt müssen nur notename und alteration stimmen
   ;; die Oktavlage interessiert uns nicht
   (lambda ( l1 l2 )
     ( cond
       ;; zunächst prüfen wir, ob die Testliste bereits erschöpft ist
       ;; wenn ja dann ist es wahr
       ((null? l1) #t
         )
       ;; wenn die Zielliste erschöpft ist
       ;; ist es falsch
       ((null? l2) #f
         )
       ;; wir überprüfen das erste Element der Testliste
       ;; wenn es gleich dem ersten Element der Zielliste ist
       ;; dann können wir mit dem restlichen Teil der Testliste fortsetzen
       ((pitch-equals? (car l1) (car l2))
        (is-in? (cdr l1) l2)
        ;'equalPitch
        )
       ;; ansonsten versuchen wir es mit dem folgenden Element der Zielliste
       (else (is-in? l1 (cdr l2))
         )
       )
     )
   )

#(define www
   ;; wir wollen jetzt die Musikausdrücke in eine Liste hängen
   ;; l1 ist unsere Testliste
   ;; l2 enthält die Pitches
   ;; l3 enthält die Musik

   (lambda (l1 l2 l3)
     ( cond
       ;; wenn die Akkordliste leer ist, dann verabschieden wir uns
       ((null? l2) '()
         )
       ;; wenn die Testliste leer ist, dann ist es auch aus
       ((null? l1) '() )
       ;; wenn die Noten der Testliste im ersten Akkord enthalten sind,
       ;; wird der Akkord hinzugefügt
       ((is-in? l1 (car l2))
        (cons (car l3) (www l1 (cdr l2) (cdr l3)))
        )
       ;; wenn die Noten von l1 nicht im ersten Akkord enthalten sind
       ;; machen wir mit der restlichen Akkordliste weiter
       (else (www l1 (cdr l2) (cdr l3))
         )
       )
     )
   )

#(define x-weiss

   ;; wir berücksichtigen nur Akkorde, die auf weißen Tasten gespielt werden
   ;; l2 weil die Pitchliste in den anderen Upros auch l2 ist
   ;; l2 ist eine Liste von Pitchlisten
   (lambda (l2)
     ( cond
       ;; wenn die Akkordliste leer ist, dann verabschieden wir uns
       ((null? l2) '()
         )

       ;; wenn der Akkord schwarze Tasten benötigt, dann haben wir fertig
       ((nur-weiss? (car l2))
        (cons (car l2)( x-weiss (cdr l2) )))
       ;; wenn schwarze Tasten enhalten sind machen wir ohne diese Pitchliste weiter
       (else (x-weiss  (cdr l2) ))

       )
     )
   )

#(define y-weiss
   ;; l2 enthält die Pitches
   ;; l3 enthält die Musik
   ;; wir berücksichtigen nur Akkorde, die auf weißen Tasten gespielt werden
   ;; l2 weil die Pitchliste in den anderen Upros auch l2 ist
   ;; l2 ist eine Liste von Pitchlisten
   (lambda (l2 l3)
     ( cond
       ;; wenn die Akkordliste leer ist, dann verabschieden wir uns
       ((null? l2) '()
         )

       ;; wenn der Akkord schwarze Tasten benötigt, dann haben wir fertig
       ((nur-weiss? (car l2))
        (cons (car l3)( y-weiss (cdr l2) (cdr l3))))
       ;; wenn schwarze Tasten enhalten sind machen wir ohne diese Pitchliste weiter
       (else (y-weiss  (cdr l2) (cdr l3) ))

       )
     )
   )

%% Liste der transponierten AKkorde
%% in zwei Stufen
%% die innere Funktion durchläuft die Akkordliste
%% die äußere die Tonleiterliste
%% das hat den Sinn, dass ich die Liste der Akkorde insgesamt transponieren will
%% und nicht jeden Akkord transponiere

#(define ( Akkorde-in-allen-Tonleitern Pitch Musik)
   (append-map
    (lambda (p)
      (map
       (lambda (music)
         #{ { \transpose c $p $music } #})
       Musik
       )
      )
    (event-chord-pitches Pitch)
    )
   )

#(define  (my-chords music)
   "Return a list of all Chords from @var{music}."
   ;; Opencoded for efficiency.
   (reverse!
    (let loop ((music music) (pitches '()))
      (let ((p  (ly:music-property music 'name)))
        (if (eq? p 'EventChord)
            (cons  music pitches)
            (let ((elt (ly:music-property music 'element)))
              (fold loop
                (if (ly:music? elt)
                    (loop elt pitches)
                    pitches)
                (ly:music-property music 'elements))))))))

%% und jetzt das Ergebnis aller Mühen
AkkordAnalyse=
#(define-music-function (Input Akkordliste Tonarten)
   (ly:music? ly:music? ly:music?)

   ;; Input ist der Musikausdruck, der analysiert werden soll
   ;; Akkordliste eine Liste von Akkorden, mit denen der Input abgeglichen werden soll
   ;; Tonarten enthält eine Liste von Pitches, in die Akkorde transponiert werden sollen

   ;; wir ziehen die Pitches raus
   ;; normieren sie und sortieren sowie Entfernen doppelte
   ;;(define myInput (fixfertig Input))

   ;(define ChordListe (my-chords Akkordliste))

   ;; wir transponieren die Akkordliste in alle Tonarten
   ;;(define MusikListe (Akkorde-in-allen-Tonleitern Tonarten (my-chords Akkordliste))

   ;; wir machen aus unserer Liste der Akkorde eine Liste von Pitches zwecks Vergleichsmöglichkeit
   ;;(define PitLis (mk-pitch MusikListe))

   ;; das funktioniert nur, wenn alles ineinandergeschachtelt wird

   (make-sequential-music
    (www
     (fixfertig Input)
     (mk-pitch (Akkorde-in-allen-Tonleitern Tonarten (my-chords Akkordliste)))
     (Akkorde-in-allen-Tonleitern Tonarten (my-chords Akkordliste) ))
    )
   )

AkkordAnalyseWeisseTasten=
#(define-music-function (Input Akkordliste Tonarten)
   (ly:music? ly:music? ly:music?)

   ;; Input ist der Musikausdruck, der analysiert werden soll
   ;; Akkordliste eine Liste von Akkorden, mit denen der Input abgeglichen werden soll
   ;; Tonarten enthält eine Liste von Pitches, in die Akkorde transponiert werden sollen

   ;; wir ziehen die Pitches raus
   ;; normieren sie und sortieren sowie Entfernen doppelte
   ;;(define myInput (fixfertig Input))

   ;; jetzt müssen wir die Akkordliste analysieren

   ;(define ChordListe (my-chords Akkordliste))

   ;; wir transponieren die Akkordliste in alle Tonarten
   ;;(define MusikListe (Akkorde-in-allen-Tonleitern Tonarten (my-chords Akkordliste))

   ;; wir machen aus unserer Liste der Akkorde eine Liste von Pitches zwecks Vergleichsmöglichkeit
   ;;(define PitLis (mk-pitch MusikListe))

   ;; das funktioniert nur, wenn alles ineinandergeschachtelt wird
   ;#(define Ergebnis (www myInput (x-weiss PitLis) (y-weiss PitLis MusikListe) ))
   ;(www myInput PitLis MusikListe )
   (make-sequential-music
    (www
     (fixfertig Input)
     (x-weiss (mk-pitch (Akkorde-in-allen-Tonleitern Tonarten (my-chords Akkordliste))))
     (y-weiss
      (mk-pitch (Akkorde-in-allen-Tonleitern Tonarten (my-chords Akkordliste)))
      (Akkorde-in-allen-Tonleitern Tonarten (my-chords Akkordliste) )))
    )
   )
