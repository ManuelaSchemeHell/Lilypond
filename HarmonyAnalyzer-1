\version "2.19.37"

\language "deutsch"

myMusik= < c'' >1_"Input"
Tonleitern=< c des d es e f fis ges g as a b h >
Tonleitern=< c >
chExceptionMusic = {
  <c es ges>1-\markup { \super "dim" }
  <c e gis>1-\markup { \super "maj" }
  <c e geses>1-\markup { \super "ddim" }
  <c eses ges >1-\markup { \super "dddim" }
  <c e g h>1-\markup { \super "maj7" }
  <c g >1-\markup { \super "5" }
  <c g d'>1-\markup { \super "5(add9)" }
  <c g des'>1-\markup { \super "5" \super { \flat "9" } }
  <c g dis'>1-\markup { \super "5"  \super { \sharp "9"} }
  <c e g a b>1-\markup { \super "7(add6)" }
  <c es g h>1-\markup { "m" \super "maj7" }
  <c es g h d'>1-\markup { "m" \super "maj9" }
  <c es g h d' f'>1-\markup { "m" \super "maj11" }
  <c es g b c'>1-\markup { "m" \super "7add8" }
  <c es g b d' e'>1-\markup { "m" \super "9add10" }
  <c es g b d' f' g'>1-\markup { "m" \super "11add12" }
  <c es ges h>1-\markup { "m" \super { "maj7" \flat "5" } }
  <c e  ges h>1-\markup { \super { "maj7" \flat "5" } }
  <c es ges heses>1-\markup { \super "dim7" }
  <c e g h d'>1-\markup { \super "maj9" }

  <c e g b  a' >1-\markup { \super "7(add13)" }
  %<c e g  d' >1-\markup { \super "add9" }
  <c e g b des' as' >1-\markup { \super {  \flat "9"  \flat 13 } }
  <c e g b d' a' >1-\markup { \super "13" }
  <c e g a d'>1-\markup { \super "6(add9)" }
  <c e g a f'>1-\markup { \super "6(add11)" }
  <c e g b d' f' a'>1-\markup { \super "13(add11)" }
  <c e g a a'>1-\markup { \super "6(add13)" }
  %<c e g a fis'>1-\markup { \super "6(add" \super { \sharp "11)" } }
 % <c es g as h>1-\markup { "m" \super "7(add" \super { \flat "6)" } }
  <c es g as h>1-\markup { "m" \super "7(add" \super { \flat "6)" } }
  <c es g a h>1-\markup { "m" \super "7(add6)" }
  <c es g h f'>1-\markup { "m" \super "maj7(add11)" }
  <c es g a h d'>1-\markup { "m" \super "maj9(add6)" }
  <c e gis h>1-\markup { \super "maj7" \super {  \sharp 5 } }
  <c e g a h>1-\markup { \super "maj7(add6)" }
  <c f gis d'>1-\markup { \super "sus4" \super {  \sharp "5(add9)" } }
  <c f g d'>1-\markup { \super "sus4(add9)" }
  <c es g a f'>1-\markup { "m" \super "6(add11)" }
}

% Convert music to list and prepend to existing exceptions.
chExceptions = #( append
                  ( sequential-music-to-chord-exceptions chExceptionMusic #t)
                  ignatzekExceptions)

chExceptions = #( append
                  ( sequential-music-to-chord-exceptions chExceptionMusic #t)
                  ignatzekExceptions)
\include "Chordlist.ily" % Liste der Akkorde als Musik: ChordI = \chordmode { c:1 }
\include "DefChordList.ily" % MusLis

%AK = { \chordmode { \germanChords  s2 d:m  } }

#(define (pitch-equals? p1 p2)
   (and
    (= (ly:pitch-alteration p1) (ly:pitch-alteration p2))
    (= (ly:pitch-notename p1) (ly:pitch-notename p2))))

#(define bugeln
   (lambda (plis)
     (cond
      ;; wir haben fertig gebügelt
      ((null? plis) '())
      (else (cons (ly:make-pitch 0
                    (ly:pitch-notename (car plis))
                    (ly:pitch-alteration (car plis)))
              (bugeln (cdr plis)))

        ))))

#(define myInput (sort (bugeln (music-pitches myMusik) ) ly:pitch<?) )

#(define mk-pitch
   ;; wir erschaffen eine Pitchliste aus der Musikliste
   (lambda (ls)
     (cond
      ;; wir haben fertig, wenn Liste leer ist
      ((null? ls) '())

      ;; wenn das Listenelement ein gültiger Musikausdruck ist
      ;; dann fügen wir die sortierte Pitchliste als Listenelement hinzu
      ((ly:music? (car ls))
       (cons (sort (music-pitches (car ls) ) ly:pitch<?)
         ;(cons (car l2) (vvv l1 (cdr l2)))
         (mk-pitch (cdr ls)))
       )
      ;; ansonsten machen wir mit dem Rest der Liste weiter
      (else (mk-pitch (cdr ls)))
      )
     )
   )

#(define is-in?
   ;; wir versuchen zu eruieren
   ;; ob alle Elemente der Liste l1 in l2 enthalten sind
   ;; genauer gesagt müssen nur notename und alteration stimmen
   ;; die Oktavlage interessiert uns nicht
   (lambda ( l1 l2 )
     ( cond
       ;; zunächst prüfen wir, ob die Testliste bereits erschöpft ist
       ;; wenn ja dann ist es wahr
       ((null? l1) #t
         )
       ;; wenn die Zielliste erschöpft ist
       ;; ist es falsch
       ((null? l2) #f
         )
       ;; wir überprüfen das erste Element der Testliste
       ;; wenn es gleich dem ersten Element der Zielliste ist
       ;; dann können wir mit dem restlichen Teil der Testliste fortsetzen
       ((pitch-equals? (car l1) (car l2))
        (is-in? (cdr l1) l2)
        ;'equalPitch
        )
       ;; ansonsten versuchen wir es mit dem folgenden Element der Zielliste
       (else (is-in? l1 (cdr l2))
         )
       )
     )
   )

%(every (lambda (x) (->bool (member x ListeII pitch-equals?))) ListeI)

#(define www
   ;; wir wollen jetzt die Musikausdrücke in eine Liste hängen
   ;; l1 ist unsere Testliste
   ;; l2 enthält die Pitches

   (lambda (l1 l2 l3)
     ( cond
       ;; wenn die Akkordliste leer ist, dann verabschieden wir uns
       ((null? l2) '()
         )
       ;; wenn die Testliste leer ist, dann ist es auch aus
       ((null? l1) '() )
       ;; wenn die Noten der Testliste im ersten Akkord enthalten sind,
       ;; wird der Akkord hinzugefügt
       ((is-in? l1 (car l2))
        (cons (car l3) (www l1 (cdr l2) (cdr l3)))
        )
       ;; wenn die Noten von l1 nicht im ersten Akkort enthalten sind
       ;; machen wir mit der restlichen Akkordliste weiter
       (else (www l1 (cdr l2) (cdr l3))
         )
       )
     )
   )

%% Liste der transponierten AKkorde
%% in zwei Stufen
%% die innere Funktion durchläuft die Akkordliste
%% die äußere die Tonleiterliste
%% das hat den Sinn, dass ich die Liste der Akkorde insgesamt transponieren will
%% und nicht jeden Akkord transponiere

#(define ( Akkorde-in-allen-Tonleitern Pitch Musik)
   (append-map
    (lambda (p)
      (map
       (lambda (music)
         #{ { \transpose c $p $music } #})
       Musik
       )
      )
    (event-chord-pitches Pitch)
    )
   )

#(define MusikListe (Akkorde-in-allen-Tonleitern Tonleitern MusLis))
%#(define Akkordliste (Akkorde-in-allen-Tonleitern Tonleitern AkkLis))
#(define PitLis (mk-pitch MusikListe))
%#(display (length PitLis))
#(newline)
#(define Ergebnis (www myInput PitLis MusikListe ))
%#(define AkkordNamen (www myInput PitLis Akkordliste))
#(display (length Ergebnis))

\score {
  \new Staff
  <<
    \new Voice $(make-sequential-music  (append (list myMusik) Ergebnis))
    \new ChordNames {
      s1
      $(make-sequential-music Ergebnis)
    }
  >>
}

%#(display (length (VersuchInEinem Tonleitern MusLis)))
