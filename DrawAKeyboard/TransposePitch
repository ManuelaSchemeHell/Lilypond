\version "2.19.37"

#(define (accidental->markup alteration)
   "Return accidental markup for ALTERATION."
   (if (= alteration 0)
       (make-line-markup (list empty-markup))
       (make-line-markup
        (list
         (alteration->text-accidental-markup alteration)
         (make-hspace-markup 0.1)))))

#(define-public (note-name->string pitch)
   "Return pitch markup for @var{pitch}."
   (make-concat-markup
    (list
     (make-simple-markup
      (vector-ref #("C" "D" "E" "F" "G" "A" "B") (ly:pitch-notename pitch)))
     (accidental->markup (ly:pitch-alteration pitch)))))

#(define (note-name->german-string pitch)
   "Return string for @var{pitch}, using German note names."
   (define (pitch-alteration-semitones pitch)
     (inexact->exact (round (* (ly:pitch-alteration pitch) 2))))
   (let* ((name (ly:pitch-notename pitch))
          (alt-semitones  (pitch-alteration-semitones pitch))
          (n-a (if (equal? (cons name alt-semitones) '(6 . -1))
                   (cons 7 alt-semitones)
                   (cons name alt-semitones))))
     (string-append
      (vector-ref #("C" "D" "E" "F" "G" "A" "H" "B") (car n-a))
      (let ((alteration (/ (cdr n-a) 2)))
        (cond
         ((and (= alteration FLAT) (= (car n-a) 7))
          "")
         ((and (= alteration FLAT) (or (= (car n-a) 5) (= (car n-a) 2) ))
          "s")
         ((= alteration FLAT) "es")
         ((and (= alteration DOUBLE-FLAT) (or (= (car n-a) 5)(= (car n-a) 2)))
          "ses")
         ((= alteration DOUBLE-FLAT)
          "eses")
         ((= alteration SHARP)
          "is")
         ((= alteration DOUBLE-SHARP)
          "isis")
         (else ""))))))

#(define-markup-command
  (make-notenkopf layout props scale-factor p farbe offset)
  (number? ly:pitch? symbol? pair?)
  (ly:stencil-scale
   (ly:stencil-in-color
    (ly:stencil-translate
     (ly:stencil-add
      (interpret-markup layout props   #{
        \markup #(note-name->german-string p)
        #}
        )
      )
     offset
     )
    (first (x11-color farbe))
    (second (x11-color farbe))
    (third (x11-color farbe))
    )
   scale-factor scale-factor
   )
  )

meinPitch = cis
myScale= { c }

testMusik=
\relative c'
{
  #(define myPitch (ly:make-pitch -1 0 0))
  <c'>-\markup \make-notenkopf #1 #myPitch #'LemonChiffon4 #'( 0 . 0)
}

%% transponiert myPitch nicht mit
%% wie eigentlich zu erwarten war
\relative {
  \transpose c e \testMusik
}

multipleTransposes =
#(define-music-function (m music)(ly:music? ly:music?)
   (music-clone m
     'elements
     (map
      (lambda (pitch)
        (ly:music-property #{ \transpose c $pitch $music #} 'element))
      (event-chord-pitches m))))
